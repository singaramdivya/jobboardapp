#src/components/api.js:

import axios from 'axios';

export const fetchJobs = async (page) => {
  const response = await axios.get(`https://testapi.getlokalapp.com/common/jobs?page=${page}`);
  return response.data.jobs;
};


#src/components/Bookmarks.js:

import React, { useState, useEffect } from 'react';
import { getBookmarkedJobs, removeJob } from '../utils/storage';
import JobCard from './JobCard';
import './style.css';

const Bookmarks = () => {
  const [bookmarkedJobs, setBookmarkedJobs] = useState([]);

  useEffect(() => {
    setBookmarkedJobs(getBookmarkedJobs());
  }, []);

  const handleRemoveBookmark = (jobId) => {
    removeJob(jobId);
    setBookmarkedJobs(getBookmarkedJobs()); 
  };

  return (
    <div className="bookmarks-container">
      <h1>Bookmark List</h1>
      {bookmarkedJobs.length === 0 ? (
        <p>No bookmarks found</p>
      ) : (
        bookmarkedJobs.map((job) => (
          <JobCard
            key={job.id}
            job={job}
            onBookmark={handleRemoveBookmark}
            isBookmarked={true}
            context="bookmarks"
          />
        ))
      )}
    </div>
  );
};

export default Bookmarks;

#src/components/Filter.js:

import React, { useState } from 'react';
import './style.css';

const Filter = () => {
  

  return (
    <div className="filters">
    
      <aside className="job-filters">
        
         <div className="filter-section">
           <h4>Remote</h4>
           <label><input type="checkbox" /> Remote Only</label>
         </div>
         <div className="filter-section">
           <h4>Type</h4>
           <label><input type="checkbox" /> Contract</label>
           <label><input type="checkbox" /> Full time</label>
           <label><input type="checkbox" /> Part time</label>
        </div>
         <div className="filter-section">
           <h4>Sector</h4>
           <label><input type="checkbox" /> Development</label>
           <label><input type="checkbox" /> Marketing</label>
           <label><input type="checkbox" /> SEO</label>
           <label><input type="checkbox" /> Others</label>
         </div>
         <div className="filter-section">
           <h4>Skills</h4>
           <label><input type="checkbox" /> HTML</label>
           <label><input type="checkbox" /> JavaScript</label>
           <label><input type="checkbox" /> CSS</label>
           <label><input type="checkbox" /> Others</label>
        </div>
      </aside>
    </div>
  );
};

export default Filter;

#src/components/Footer.js:

// src/components/Footer.js
import React from 'react';
import './style.css';

function Footer() {
  return (
    <footer>
      Â© 2024 FindJOB. All rights reserved.
    </footer>
  );
}

export default Footer;

#src/components/Header.js:

// src/components/Header.js
import React from 'react';
import './style.css';

function Header() {
  return (
    <header>
        <div className="navbar">
        <div className="logo">Find JOB</div>
        <ul className="menu">
            <li><a href="/jobs">Browse Jobs</a></li>
            <li><a href="#">Employers</a></li>
            <li><a href="#">Jobseekers</a></li>
            <li><a href="#">Career Advice</a></li>
            <li><a href="#">Product</a></li>
            <li><a href="#">Contact Us</a></li>
        </ul>
        <div className="auth">
            <li><a href="#">Sign In</a></li>
        </div>
        </div>
    </header>
  );
}

export default Header;

#src/components/HomePage:

// src/pages/HomePage.js
import React from 'react';
import { useNavigate } from 'react-router-dom';
import Header from '../components/Header';
import Footer from '../components/Footer';
import './style.css';
import Jobs from './Jobs';

function HomePage() {
    const navigate = useNavigate();
    const handleJobs = ()=>{
        navigate('/jobs')
    } 
    const handleBookMark = () =>{
        navigate('/bookmarks')
    }
  return (
    <div className='home-page-container'>
      <Header />
     
      <main>
      <div className="hero">
          <div className='hero-sub-section'>
            <div>
              <h1>See who's hiring in your area.</h1>
              <p>Chat to people on public transport, connect on social media and be courageous for networking success.</p>
            </div>
            <div className="hero-buttons">
              <button className="apply-btn" onClick={handleJobs}>APPLY JOB</button>
              <button className="companies-btn" onClick={handleBookMark}>BOOK MARK</button>
            </div>
          </div>
          <div className='career-img'>
            <img src='./Desktop-karir.png' alt='career-page'/>
          </div>
        </div>
        
      </main>
      <Footer />
    </div>
  );
}

export default HomePage;

#src/components/JobCard.js:
import React from 'react';
import { useNavigate } from 'react-router-dom';
import './style.css';

const JobCard = ({ job, onBookmark, isBookmarked, context }) => {
  const navigate = useNavigate();

  const handleJobClick = () => {
    navigate(`/job/${job.id}`);
  };

  const getBookmarkButtonLabel = () => {
    if (context === 'bookmarks') {
      return 'Remove Bookmark';
    }
    return isBookmarked ? 'Bookmarked' : 'Bookmark'; 
  };

  return (
    <div className="job-card" onClick={handleJobClick}>
      <h3>{job.title}</h3>
      <p>
        <strong>Location:</strong> {job.primary_details?.Place || 'Location not provided'}
      </p>
      <p>
        <strong>Salary:</strong> {job.primary_details?.Salary || 'Salary not provided'}
      </p>
      <p>
        <strong>Phone:</strong> {job.whatsapp_no || 'Phone not available'}
      </p>
      <button
        onClick={(e) => {
          e.stopPropagation();
          onBookmark(job.id); 
        }}
      >
        {getBookmarkButtonLabel()}
      </button>
    </div>
  );
};

export default JobCard;


#src/components/JobDetails.js:
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';

const JobDetail = () => {
  const { id } = useParams(); 
  const [job, setJob] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    fetchJobDetail();
  }, [id]);

  const fetchJobDetail = async () => {
    try {
      const response = await axios.get(`https://testapi.getlokalapp.com/common/jobs/${id}`);
      
      const jobArray = response.data.results;
      const job = jobArray.find((item) => item.id === parseInt(id)); 
      console.log(job)
      
      if (job) {
        setJob(job);
      } else {
        setError('Job not found');
      }
      
      setLoading(false);
    } catch (error) {
      console.error('Error fetching job details:', error);
      setError('Failed to fetch job details');
      setLoading(false);
    }
  };
  

  if (loading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <p>{error}</p>;
  }

  if (!job) {
    return <p>Job not found</p>;
  }

  return (
    <div className="job-detail">
      <h2>{job.title}</h2>
      <p>
        <strong>Location:</strong> {job.primary_details?.Place || 'Location not provided'}
      </p>
      <p>
        <strong>Salary:</strong> {job.primary_details?.Salary || 'Salary not provided'}
      </p>
      <p>
        <strong>Phone:</strong> {job.whatsapp_no || 'Phone not available'}
      </p>
      <p>
        <strong>Description:</strong> {job.contentV3?.V3.find(detail => detail.field_key === 'Other details')?.field_value || 'No description available'}
      </p>
      {job.creatives && job.creatives.length > 0 && (
        <div className='image-container'>
          <img src={job.creatives[0].file} alt="Job"/>
        </div>
      )}
    </div>
  );
};

export default JobDetail;

#src/components/Jobs.js:

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import JobCard from './JobCard';
import { saveJob, isJobBookmarked ,removeJob} from '../utils/storage';
import JobDetail from './JobDetail';
import Filter from './Filter';
import './style.css';

const Jobs = () => {
  const [jobs, setJobs] = useState([]);
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [selectedJob, setSelectedJob] = useState(null);
  const [hasMore, setHasMore] = useState(true); 
  const [searchTerm, setSearchTerm] = useState('');
  const [location, setLocation] = useState('');
  const [radius, setRadius] = useState(50);
  const [setFilters] = useState()

  const handleReset = () => {
    setSearchTerm('');
    setLocation('');
    setRadius(50);
    setFilters({ searchTerm: '', location: '', radius: 50 });
  };

  const handleSearch = () => {
    setFilters({ searchTerm, location, radius });
  };
const toggleBookmark = (jobId) => {
  if (isJobBookmarked(jobId)) {
    removeJob(jobId); // Remove job from bookmarks
  } else {
    const job = jobs.find((job) => job.id === jobId);
    saveJob(job); // Add job to bookmarks
  }
  // Trigger re-render to reflect bookmark status
  setJobs([...jobs]);
};
  useEffect(() => {
    fetchJobs();
  }, [page]);

  // Infinite scroll event listener
  useEffect(() => {
    const handleScroll = () => {
      if (window.innerHeight + window.scrollY >= document.body.scrollHeight - 500 && !loading && hasMore) {
        setPage(prevPage => prevPage + 1); // Load next page
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [loading, hasMore]);

  const fetchJobs = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`https://testapi.getlokalapp.com/common/jobs?page=${page}`);
      const jobsData = response.data?.results || []; // Handle the API's response structure
      setJobs(prev => [...prev, ...jobsData]);

      if (jobsData.length === 0) {
        setHasMore(false); // No more jobs to load
      }

      setLoading(false);
    } catch (error) {
      console.error('Error fetching jobs:', error);
      setError('Failed to fetch jobs');
      setLoading(false);
    }
  };

  return (
    <div className="jobs-page">
      <div className='top-section'>
        <div className="filter-group">
          <label>Search Jobs</label>
          <input
            type="text"
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
            placeholder="Search jobs"
          />
        </div>

        <div className="filter-group">
          <label>Location</label>
          <input
            type="text"
            value={location}
            onChange={e => setLocation(e.target.value)}
            placeholder="City / Zip / Address"
          />
        </div>

        <div className="filter-group">
          <label>Radius</label>
          <select value={radius} onChange={e => setRadius(e.target.value)}>
            <option value={50}>50 km</option>
            <option value={100}>100 km</option>
            <option value={200}>200 km</option>
          </select>
        </div>
        <div className='button-section'>
          <button onClick={handleSearch} className="search-btn">
            Search
          </button>
          <button onClick={handleReset} className="reset-btn">
            Reset
          </button>
        </div>
      </div>
      <div className='down-section'>
        <div className='side-filter'>
          <Filter setFilters={setFilters} />
        </div>
        <div className="jobs-container">
        {jobs.length > 0 ? (
          jobs.map((job) => (
            <JobCard
              key={job.id}
              job={job}
              onBookmark={toggleBookmark}
              isBookmarked={isJobBookmarked(job.id)}
              context="jobs" // Pass 'jobs' as the context
            />
          ))
        ) : (
          <p>No jobs available</p>
        )}
        {loading && <p>Loading...</p>}
        {error && <p>{error}</p>}
    

          {selectedJob && <JobDetail job={selectedJob} onClose={() => setSelectedJob(null)} />}
        </div>
      </div>
    </div>
  );
};

export default Jobs;


#src/utils/storage.js:

export const saveJob = (job) => {
  const bookmarkedJobs = JSON.parse(localStorage.getItem('bookmarkedJobs')) || [];
  localStorage.setItem('bookmarkedJobs', JSON.stringify([...bookmarkedJobs, job]));
};

export const getBookmarkedJobs = () => {
  return JSON.parse(localStorage.getItem('bookmarkedJobs')) || [];
};

export const removeJob = (jobId) => {
  const bookmarkedJobs = JSON.parse(localStorage.getItem('bookmarkedJobs')) || [];
  const updatedJobs = bookmarkedJobs.filter(job => job.id !== jobId);
  localStorage.setItem('bookmarkedJobs', JSON.stringify(updatedJobs));
};

export const isJobBookmarked = (jobId) => {
  const bookmarkedJobs = JSON.parse(localStorage.getItem('bookmarkedJobs')) || [];
  return bookmarkedJobs.some(job => job.id === jobId);
};


App.js:
import React, { useEffect } from 'react';
import { useLocation, Route, Routes } from 'react-router-dom';
import Jobs from './components/Jobs';
import Bookmarks from './components/Bookmarks';
import JobDetail from './components/JobDetail'; 
import HomePage from './components/HomePage';
import './App.css';  

const ScrollControl = () => {
  const location = useLocation(); 

  useEffect(() => {
    if (location.pathname === '/') {
      // Disable scrolling on the homepage
      document.body.style.overflow = 'hidden';
    } else {
      // Enable scrolling on other pages like Jobs
      document.body.style.overflow = 'auto';
    }
  }, [location.pathname]);

  return null;
};

const App = () => {
  return (
    <div>
      <ScrollControl /> {/* This controls the scroll behavior */}
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/jobs" element={<Jobs />} />
        <Route path="/bookmarks" element={<Bookmarks />} />
        <Route path="/job/:id" element={<JobDetail />} /> 
      </Routes>
    </div>
  );
};

export default App;
